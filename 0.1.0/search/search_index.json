{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CARP-S","text":"<p>Welcome to the CARP-S documentation.</p> <p>Tip</p> <p>See the navigation links in the header or side-bars. Click the  button (top left) on mobile.</p> <p>Lorum ipsum, where to go for what?</p>"},{"location":"#what-is-carp-s","title":"What is CARP-S?","text":"<p>Lorum ipsum some text</p> <ul> <li> <p> Develop With Confidence</p> <p>Developing optimizers is hard, evaluating them is harder and benchmarkig against state-of-the-art is even harder. CARP-S provides a simple and framework to develop, evaluate and benchmark your optimizer.</p> </li> <li> <p> Minimal Dependencies</p> <p>CARP-S is modular and allows you to only install what you need to run and evaluate what you want.</p> <p>Todo</p> <p>Lorum ipsum, how?</p> </li> </ul>"},{"location":"changelog/","title":"Version 0.0.1","text":""},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/automl/CARP-S/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>CARP-S could always use more documentation, whether as part of the official CARP-S docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at github.com/benjamc/CARP-S/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up <code>CARP-S</code> for local development.</p> <p>Fork the <code>CARP-S</code> repo on GitHub and then clone your fork locally: <pre><code>git clone git@github.com:YOUR_NAME_HERE/CARP-S.git\ncd CARP-S\n</code></pre></p> <p>Install your local copy into a virtualenv. We'll also install <code>pre-commit</code> which runs some code quality checks. <pre><code>python -m venv .venv\npip install -e \".[dev]\"\npre-commit install\n</code></pre></p> <p>Create a branch for local development: <pre><code>git checkout -b name-of-your-bugfix-or-feature\n</code></pre></p> <p>Now you can make your changes locally!</p> <p>When you're done making changes, check that your changes pass ruff, including testing other Python versions: <pre><code>python setup.py test or pytest\n</code></pre> Commit your changes and push your branch to GitHub:</p> <p><pre><code>git add .\ngit commit -m \"Your detailed description of your changes.\"\ngit push origin name-of-your-bugfix-or-feature\n</code></pre> Submit a pull request through the GitHub website!</p>"},{"location":"contributing/#local-development","title":"Local Development","text":""},{"location":"contributing/#virtual-environments","title":"Virtual Environments","text":"<p>You can try to install all dependencies into one big environment, but probably there are package clashes. Therefore, you can build one virtual environment for each optimizer-benchmark combination. Either run <code>scripts/build_envs.sh</code> to build all existing combinations or copy the combination and run as needed. It will create an environment with name <code>automlsuite_${OPTIMIZER_CONTAINER_ID}_${BENCHMARK_ID}</code>.</p>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in <code>README.md</code>.</li> <li>The pull request should work for <code>Python 3.9</code> and make sure that the tests pass for all supported Python versions.</li> </ol>"},{"location":"contributing/#testing","title":"Testing","text":"<p>To run a subset of tests: <pre><code>pytest tests/some_file.py  # Run tests only in a certain file\npytest -k \"test_mytest\"  # Find tests with a name matching \"test_mytest\"\n</code></pre></p>"},{"location":"contributing/#deploying","title":"Deploying","text":"<p>A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in <code>CHANGELOG.md</code>).</p> <p>Update the version in <code>pyproject.toml</code>, then run:</p> <pre><code>git tag \"x.y.z\"  # Replace with your version\ngit push\ngit push --tags\n</code></pre>"},{"location":"contributing/contributing-a-benchmark/","title":"Contributing a Benchmark","text":""},{"location":"contributing/contributing-an-optimizer/","title":"Contributng an Optimizer","text":""},{"location":"guides/containers/","title":"Containers","text":""},{"location":"guides/database/","title":"Database","text":"<p>If you want to use a personal/local database, follow these steps:</p> <ul> <li>Setup MySQL (tutorial)</li> <li> <p>Create database via <code>mysql&gt; CREATE DATABASE carps;</code>     Select password as authentification.     Per default, the database name is <code>carps</code>.     It is set in <code>carps/container/py_experimenter.yaml</code>.</p> </li> <li> <p>Add credential file at <code>carps/container/credentials.yaml</code>, e.g. <pre><code>CREDENTIALS:\n  Database:\n    user: root\n    password: &lt;password&gt;\n  Connection:\n    Standard:\n      server: localhost\n</code></pre></p> </li> <li>Set flag not to use ssh server in <code>carps/container/py_experimenter.yaml</code> if you are on your local machine.</li> </ul>"},{"location":"guides/first-steps/","title":"First Steps","text":""},{"location":"guides/hydra/","title":"Hydra","text":""},{"location":"guides/large-scale-benchmarking/","title":"Large Scale Benchmarking","text":""},{"location":"guides/large-scale-benchmarking/#parallel","title":"Parallel","text":"<p>You can run your optimization via <pre><code>conda run -n automlsuite_DUMMY_Optimizer_DUMMY_Problem python carps/run.py \\\n    +optimizer/DUMMY=config +problem/DUMMY=config \\\n    'seed=range(1,11)' \\\n    +cluster=local -m\n</code></pre> This uses joblib parallelization on your local machine. If you are on a slurm cluster, you can specify <code>+cluster=slurm</code> and adapt this to your needs. Check this page for more launchers, e.g. Ray or RQ besides Joblib and Submitit.</p>"}]}