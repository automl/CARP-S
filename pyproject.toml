[build-system]
requires = ["setuptools >= 70.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]

[project]
name = "carps"
version = "0.1.0"
dependencies = [
  "autorank",
  "ConfigSpace",
  "cryptography",
  "dataclasses-json",
  "domdf_python_tools",
  "fire",
  "hydra-colorlog",
  "hydra-core",
  "hydra-joblib-launcher",
  "hydra-submitit-launcher",
  "omegaconf",
  "pandas",
  "pyarrow",
  "py-experimenter>=1.4.1",
  "pymysql",
  "rich",
  "rliable",
  "seaborn",
  "tomli",
  "typing_extensions",
  "pymoo",
  "GitPython",
  "mlcroissant",
]

requires-python = ">=3.9"
authors = [
  { name = "Carolin Benjamins", email = "c.benjaminsq@ai.uni-hannover.de" },
]
readme = "README.md"
description = "CARP-S: Benchmarking N Optimizers on M Benchmarks"
classifiers = [
  'Intended Audience :: Science/Research',
  'Intended Audience :: Developers',
  'License :: OSI Approved :: BSD License',
  'Programming Language :: Python',
  'Topic :: Software Development',
  'Topic :: Scientific/Engineering',
  'Operating System :: POSIX',
  'Operating System :: Unix',
  'Programming Language :: Python :: 3',
  'Programming Language :: Python :: 3.9',
  'Programming Language :: Python :: 3.10',
]
license = { file = "LICENSE" }

[project.urls]
documentation = "https://github.com/automl/CARP-S/"
source = "https://github.com/automl/CARP-S/"

[project.optional-dependencies]
dev = [
  "pre-commit",
  "ruff",
  "mypy",
  "mkdocs",
  "mkdocs-material",
  "mkdocs-autorefs",
  "mkdocs-gen-files",
  "mkdocs-literate-nav",
  "mkdocs-glightbox",
  "mkdocstrings[python]",
  "markdown-exec[ansi]",
  "mike",
  "pillow",
  "cairosvg",
  "black",                # This allows mkdocstrings to format signatures in the docs
  "pytest",
  "pytest-coverage",
  "pytest-cases",
]
dummy = ["scikit-learn"]
bbob = ["ioh==0.3.14"]
hpob = ["xgboost==1.5.2"]
mfpbench = [
  "scikit-learn",
  "mf-prior-bench",
  # PD1
  "xgboost>=1.7",
]
pymoo = ["pymoo"]
yahpo = [
  "yahpo-gym==1.0.1",
  "onnxruntime==1.15.0",
  "ConfigSpace~=0.6.0",
]
dehb = ["dehb"]
hebo = ["hebo==0.3.5"]
nevergrad = [
  "nevergrad",
  "hyperopt",
  "bayesian-optimization",
  "ioh==0.3.14",
  # make sure that joblib is quite new >= 1.4.2
]
optuna = ["optuna"]
skopt = ["scikit-optimize"]
smac = [
  "swig",
  "smac>=2.1.0"
]
smac14 = [
  "smac==1.4",
  "scikit-learn==1.1.3"
]
synetune = [
  "syne-tune[basic]==0.13.0",
  # for bore
  "xgboost==2.0.3",
  "scikit-learn==1.4.0",
]

# https://docs.pytest.org/en/7.2.x/reference/reference.html#ini-options-ref
[tool.pytest.ini_options]
testpaths = ["tests"]
minversion = "7.0"
empty_parameter_set_mark = "xfail"
log_cli = false
log_level = "DEBUG"
xfail_strict = true
addopts = "--durations=10 -vv"
markers = ["example: An example"]

# https://github.com/charliermarsh/ruff
[tool.ruff]
target-version = "py311"
line-length = 120
show-source = true
src = ["carps", "tests", "examples", "notebooks"]
lint.extend-safe-fixes = ["ALL"]
extend-include = ["*.ipynb"]

# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

lint.select = [
  "A",
  # "ANN", # Handled by mypy
  "ARG",
  "B",
  "BLE",
  "COM",
  "C4",
  "D",
  # "DTZ",  # One day I should know how to utilize timezones and dates...
  "E",
  # "EXE", Meh
  "ERA",
  "F",
  "FBT",
  "I",
  # "ISC",  # Favours implicit string concatenation
  "INP",
  # "INT", # I don't understand this one
  "N",
  "NPY",
  "PD",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "PIE",
  "PT",
  "PTH",
  # "PYI", # Specific to .pyi files for type stubs
  "Q",
  "PGH004",
  "RET",
  "RUF",
  "C90",
  "S",
  # "SLF",    # Private member accessed (sure, it's python)
  "SIM",
  # "TRY", # Good in principle, would take a lot of work to statisfy
  "T10",
  "T20",
  "TID",
  "TCH",
  "UP",
  "N",
  "W",
  "YTT",
]

lint.ignore = [
  "D104",    # Missing docstring in public package
  "D105",    # Missing docstring in magic mthod
  "D203",    # 1 blank line required before class docstring
  "D205",    # 1 blank line between summary and description
  "D401",    # First line of docstring should be in imperative mood
  "N806",    # Variable X in function should be lowercase
  "E731",    # Do not assign a lambda expression, use a def
  "A003",    # Shadowing a builtin
  "S101",    # Use of assert detected.
  "W292",    # No newline at end of file
  "PLC1901", # "" can be simplified to be falsey
  "TCH003",  # Move stdlib import into TYPE_CHECKING
  "B010",    # Do not use `setattr`
  "COM812",
  # These tend to be lighweight and confuse pyright
  "PTH123",
  "PTH109",
  "T201",
  "ERA001",
]

exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  "docs",
  "*plotting*",
  "*hydra_utils*",
]

# Exclude a variety of commonly ignored directories.
[tool.ruff.per-file-ignores]
"tests/*.py" = [
  "S101",
  "D103",
  "ANN001",
  "ANN201",
  "FBT001",
  "D100",
  "PLR2004",
  "PD901",   #  X is a bad variable name. (pandas)
  "TCH",
  "N803",
]

"__init__.py" = ["I002"]
"examples/*" = [
  "INP001",
  "I002",
  "E741",
  "D101",
  "D103",
  "T20",
  "D415",
  "ERA001",
  "E402",
  "E501",
]
"docs/*" = ["INP001"]


[tool.ruff.isort]
known-first-party = ["amltk"]
known-third-party = ["sklearn"]
no-lines-before = ["future"]
required-imports = ["from __future__ import annotations"]
combine-as-imports = true
extra-standard-library = ["typing_extensions"]
force-wrap-aliases = true

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.pylint]
max-args = 10 # Changed from default of 5

[tool.mypy]
python_version = "3.11"
packages = ["tests"]
exclude = []
show_error_codes = true

warn_unused_configs = true # warn about unused [tool.mypy] lines

follow_imports = "normal"      # Type check top level api code we use from imports
ignore_missing_imports = false # prefer explicit ignores

disallow_untyped_defs = true       # All functions must have types
disallow_untyped_decorators = true # ... even decorators
disallow_incomplete_defs = true    # ...all types

no_implicit_optional = true
check_untyped_defs = true

warn_return_any = true


[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false          # Sometimes we just want to ignore verbose types
disallow_untyped_decorators = false    # Test decorators are not properly typed
disallow_incomplete_defs = false       # Sometimes we just want to ignore verbose types
disable_error_code = ["var-annotated"]

[[tool.mypy.overrides]]
module = [
  "sklearn.*",
  "ConfigSpace.*",
  "pandas.*",
  "more_itertools.*",
  "dask_jobqueue.*",
  "wandb.*",
  "threadpoolctl.*",
  "loky.*",
  "metahyper.*",
  "neps.*",
]
ignore_missing_imports = true
